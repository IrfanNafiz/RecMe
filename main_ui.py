# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# TODO 1. COMPLETED Make the consoletextedit send commands to the running process and also display is in the console in another color
# TODO 2. NOT WORKING Make the train_model.py provide percentage values so that the progress bar can be updated
# TODO 3. COMPLETED Make the addDataset button work, hence modify the app.py to run Add_person protocol
# TODO 4. COMPLETED Make the trainModel button work, make it run the train_model.py script and display the output in the console
# TODO 5. COMPLETED Add the same functionality to the filemenu options
# TODO 6. Make the waveform viewer work, make the picture scale to the size of the window

import subprocess
import os
import re
import PyQt5
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QMessageBox
from qtconsole.rich_jupyter_widget import RichJupyterWidget
from qtconsole.inprocess import QtInProcessKernelManager
from PyQt5.QtCore import QProcess

from app import add_person, retraining_protocol

AUDIO_SUBFOLDER = "audio"
NOISE_SUBFOLDER = "noise"

# Construct the path to dataset folder
PARENT_DIRECTORY = os.path.dirname(os.path.abspath(__file__))
DATASET_ROOT = os.path.join(PARENT_DIRECTORY, 'data', 'custom')
DATASET_RAW_PATH = os.path.join(PARENT_DIRECTORY, 'data', 'raw_group')

DATASET_AUDIO_PATH = os.path.join(DATASET_ROOT, AUDIO_SUBFOLDER)
DATASET_NOISE_PATH = os.path.join(DATASET_ROOT, NOISE_SUBFOLDER)

APPLICATION_PATH = 'app.py'
TRAIN_MODEL_PATH = 'train_model.py'
PLOT_RECORD_PATH = 'waveform_fft_output.png'
EMPTY_PLOT_PATH = 'empty_plot.png'
DEMO_PATH = 'testing_stream_app.py'
ICON_PATH = 'pyqt5_ui\icons'

# Enable High DPI display scaling
if hasattr(QtCore.Qt, 'AA_EnableHighDpiScaling'):
    PyQt5.QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True)

if hasattr(QtCore.Qt, 'AA_UseHighDpiPixmaps'):
    PyQt5.QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_UseHighDpiPixmaps, True)

# A regular expression, to extract the % complete.
progress_re = re.compile("Total complete: (\d+)%")
# epoch_re = re.compile("Epoch (\d+):")
# val_acc_re = re.compile("([0-9.]+), saving model to model.h5")
epoch_re = None
val_acc_re = None

def simple_percent_parser(output):
    """
    Matches lines using the progress_re regex,
    returning a single integer for the % progress.
    """
    m = progress_re.search(output)
    if m:
        pc_complete = m.group(1)
        return int(pc_complete)

def calculate_progress(epoch_num, val_acc):
    # Calculate the final progress value using the formula
    progress_value = epoch_num + (100 - epoch_num)*val_acc
    return progress_value

def progress_parser_during_training(output):
    # Search for epoch value and validation accuracy using the regular expressions
    epoch_match = epoch_re.search(output)
    val_acc_match = val_acc_re.search(output)

    if epoch_match and val_acc_match:
        Ui_MainWindow.console("Epoch: " + epoch_match.group(1))
        Ui_MainWindow.console("Validation Accuracy: " + val_acc_match.group(1))
        epoch_value = int(epoch_match.group(1))
        val_acc_value = int(round(val_acc_match.group(1)))

        # Calculate the progress value using epoch and validation accuracy
        progress_value = calculate_progress(epoch_value, val_acc_value)

        return progress_value


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        self.p = None
        self.path = 'demo'  # TODO remove this before deployment

        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.WindowModal)
        MainWindow.resize(921, 565)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.join(ICON_PATH, "voice-recognition.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setWindowOpacity(4.0)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        spacerItem = QtWidgets.QSpacerItem(45, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 1, 2, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 39, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem1, 2, 1, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(46, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem2, 1, 0, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem3, 0, 1, 1, 1)
        self.verticalLayout_11 = QtWidgets.QVBoxLayout()
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.labelAppTitle = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("RomanD")
        font.setPointSize(16)
        self.labelAppTitle.setFont(font)
        self.labelAppTitle.setAlignment(QtCore.Qt.AlignCenter)
        self.labelAppTitle.setObjectName("labelAppTitle")
        self.verticalLayout_3.addWidget(self.labelAppTitle)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout_3.addWidget(self.line)
        self.verticalLayout_11.addLayout(self.verticalLayout_3)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.folderLabel = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(12)
        self.folderLabel.setFont(font)
        self.folderLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.folderLabel.setObjectName("folderLabel")

        self.verticalLayout_9.addWidget(self.folderLabel)

        self.folderListWidget = QtWidgets.QListWidget(self.centralwidget)
        self.folderListWidget.setObjectName("folderListWidget")
        self.folderListWidget.setStyleSheet(
            "QListWidget { background-color: lightblue; }"
            "QListWidget::item { background-color: white; }"
        )

        self.verticalLayout_9.addWidget(self.folderListWidget)
        self.horizontalLayout_9.addLayout(self.verticalLayout_9)
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setObjectName("verticalLayout_10")

        # self.viewerLabel = QtWidgets.QLabel(self.centralwidget)
        # font = QtGui.QFont()
        # font.setFamily("Rockwell")
        # font.setPointSize(12)
        # self.viewerLabel.setFont(font)
        # self.viewerLabel.setAlignment(QtCore.Qt.AlignCenter)
        # self.viewerLabel.setObjectName("viewerLabel")
        # self.verticalLayout_10.addWidget(self.viewerLabel)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")

        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")

        # # Load the image
        # self.image_path = EMPTY_PLOT_PATH
        # self.pixmap = QtGui.QPixmap(self.image_path)
        #
        # # Create the waveform viewer widget
        # self.waveformViewer = QtWidgets.QTextEdit(self.centralwidget)
        # self.waveformViewer.setObjectName("waveformViewer")
        # # Set the textEdit widget to read-only
        # self.waveformViewer.setReadOnly(True)
        #
        # # self.updateImageSize()
        #
        # # comments the below two lines out if updateImageSize is used
        # image_html = f'<img src="{self.image_path}">'
        # self.waveformViewer.setHtml(image_html)

        # self.verticalLayout_6.addWidget(self.waveformViewer)

        self.recordButton = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        self.recordButton.setFont(font)
        self.recordButton.setObjectName("recordButton")
        self.verticalLayout_6.addWidget(self.recordButton)

        self.retrainButton = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        self.retrainButton.setFont(font)
        self.retrainButton.setObjectName("retrainButton")
        self.verticalLayout_6.addWidget(self.retrainButton)
        self.addButton = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        self.addButton.setFont(font)
        self.addButton.setObjectName("addButton")
        self.verticalLayout_6.addWidget(self.addButton)

        self.quitButton = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        self.quitButton.setFont(font)
        self.quitButton.setObjectName("quitButton")
        self.verticalLayout_6.addWidget(self.quitButton)
        self.verticalLayout_7.addLayout(self.verticalLayout_6)
        self.verticalLayout_10.addLayout(self.verticalLayout_7)
        self.horizontalLayout_9.addLayout(self.verticalLayout_10)
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.consoleLabel = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(12)
        self.consoleLabel.setFont(font)
        self.consoleLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.consoleLabel.setObjectName("consoleLabel")

        self.verticalLayout_8.addWidget(self.consoleLabel)

        self.consoleBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        # self.consoleBrowser = RichJupyterWidget()
        self.consoleBrowser.setObjectName("consoleBrowser")
        self.consoleBrowser.setStyleSheet("background-color: #333; color: #EEE; font-size: 8pt;")
        # dummy_code = '''
        #         x = 5
        #         y = 10
        #         result = x + y
        #         result
        #         '''
        # self.consoleBrowser.setPlainText(sample_text)
        # self.consoleBrowser.append_stream(dummy_code)

        self.verticalLayout_8.addWidget(self.consoleBrowser)

        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")

        # adding a command line to input commands
        self.commandLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.commandLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.commandLineEdit.setObjectName("commandLineEdit")
        self.horizontalLayout_10.addWidget(self.commandLineEdit)

        self.sendCommandButton = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        self.sendCommandButton.setFont(font)
        self.sendCommandButton.setObjectName("sendCommandButton")

        self.horizontalLayout_10.addWidget(self.sendCommandButton)
        self.verticalLayout_8.addLayout(self.horizontalLayout_10)
        self.horizontalLayout_9.addLayout(self.verticalLayout_8)
        # add progress bar
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.progressBar.setTextVisible(False)
        self.progressBar.setStyleSheet("QProgressBar::chunk {background-color: #00BFFF;}")
        self.progressBar.setOrientation(QtCore.Qt.Vertical)
        self.horizontalLayout_9.addWidget(self.progressBar)


        self.verticalLayout_11.addLayout(self.horizontalLayout_9)
        self.gridLayout.addLayout(self.verticalLayout_11, 1, 1, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 921, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionRecord = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(os.path.join(ICON_PATH, "record_icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionRecord.setIcon(icon1)
        self.actionRecord.setObjectName("actionRecord")
        self.actionRe_Train = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(os.path.join(ICON_PATH, "retrain_icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionRe_Train.setIcon(icon2)
        self.actionRe_Train.setObjectName("actionRe_Train")
        self.actionAdd_Person = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(os.path.join(ICON_PATH, "add_dataset_icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAdd_Person.setIcon(icon3)
        self.actionAdd_Person.setObjectName("actionAdd_Person")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(os.path.join(ICON_PATH, "quit_icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionQuit.setIcon(icon4)
        self.actionQuit.setObjectName("actionQuit")
        self.actionBrowse_Dataset = QtWidgets.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(os.path.join(ICON_PATH, "folder_icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionBrowse_Dataset.setIcon(icon5)
        self.actionBrowse_Dataset.setObjectName("actionBrowse_Dataset")
        self.actionBrowse_Raw_Dataset = QtWidgets.QAction(MainWindow)
        self.actionBrowse_Raw_Dataset.setIcon(icon5)
        self.actionBrowse_Raw_Dataset.setObjectName("actionBrowse_Raw_Dataset")
        self.actionBrowse_Noise_Dataset = QtWidgets.QAction(MainWindow)
        self.actionBrowse_Noise_Dataset.setIcon(icon5)
        self.actionBrowse_Noise_Dataset.setObjectName("actionBrowse_Noise_Dataset")
        self.actionNormal = QtWidgets.QAction(MainWindow)
        self.actionNormal.setObjectName("actionNormal")
        self.actionMaximize = QtWidgets.QAction(MainWindow)
        self.actionMaximize.setObjectName("actionMaximize")
        self.menuFile.addAction(self.actionRecord)
        self.menuFile.addAction(self.actionRe_Train)
        self.menuFile.addAction(self.actionAdd_Person)
        self.menuFile.addAction(self.actionQuit)
        self.menuEdit.addAction(self.actionBrowse_Dataset)
        self.menuEdit.addAction(self.actionBrowse_Raw_Dataset)
        self.menuEdit.addAction(self.actionBrowse_Noise_Dataset)
        self.menuView.addAction(self.actionNormal)
        self.menuView.addAction(self.actionMaximize)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())

        # button and action triggers
        self.retranslateUi(MainWindow)

        self.actionRecord.triggered.connect(self.start_record)  # type: ignore
        self.actionRe_Train.triggered.connect(self.start_retrain)  # type: ignore
        self.actionAdd_Person.triggered.connect(self.start_add_person)  # type: ignore
        self.actionQuit.triggered.connect(self.closeEvent)  # type: ignore
        self.actionMaximize.triggered.connect(MainWindow.showMaximized)  # type: ignore
        self.actionNormal.triggered.connect(MainWindow.showNormal)  # type: ignore
        self.actionBrowse_Dataset.triggered.connect(self.open_dataset_directory)  # type: ignore
        self.actionBrowse_Noise_Dataset.triggered.connect(self.open_noise_directory)  # type: ignore
        self.actionBrowse_Raw_Dataset.triggered.connect(self.open_raw_audio_directory)  # type: ignore

        self.recordButton.clicked.connect(self.start_record)
        self.addButton.clicked.connect(self.start_add_person)
        self.retrainButton.clicked.connect(self.start_retrain)
        self.sendCommandButton.clicked.connect(self.send_command)
        self.commandLineEdit.returnPressed.connect(self.sendCommandButton.click)
        self.quitButton.clicked.connect(self.closeEvent)  # type: ignore



        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "RecMe - The Speaker Identifier"))

        self.labelAppTitle.setText(_translate("MainWindow", "RecMe - The Speaker Identifier"))

        self.folderLabel.setText(_translate("MainWindow", "People in Dataset"))

        # self.viewerLabel.setText(_translate("MainWindow", "Waveform Viewier"))

        self.recordButton.setStatusTip(_translate("MainWindow", "Press to start recording an audio for identification"))
        self.recordButton.setText(_translate("MainWindow", "Record"))

        self.retrainButton.setStatusTip(_translate("MainWindow", "Press to re-train the machine learning model"))
        self.retrainButton.setText(_translate("MainWindow", "Re-Train Model"))

        self.addButton.setStatusTip(_translate("MainWindow", "Press to add a new person to the dataset saying the passphrase 10 times"))
        self.addButton.setText(_translate("MainWindow", "Add Person"))

        self.sendCommandButton.setStatusTip(_translate("MainWindow", "Open the root dataset directory"))
        self.sendCommandButton.setText(_translate("MainWindow", "Send Command"))

        self.quitButton.setStatusTip(_translate("MainWindow", "Press to quit the application"))
        self.quitButton.setText(_translate("MainWindow", "Quit"))

        self.consoleLabel.setText(_translate("MainWindow", "Console Output"))

        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menuView.setTitle(_translate("MainWindow", "View"))
        self.actionRecord.setText(_translate("MainWindow", "Record"))
        self.actionRecord.setStatusTip(_translate("MainWindow", "Record an audio for identification"))
        self.actionRecord.setShortcut(_translate("MainWindow", "Ctrl+R"))
        self.actionRe_Train.setText(_translate("MainWindow", "Re-Train"))
        self.actionRe_Train.setStatusTip(_translate("MainWindow", "Re-train the machine learning model"))
        self.actionAdd_Person.setText(_translate("MainWindow", "Add Person"))
        self.actionAdd_Person.setStatusTip(_translate("MainWindow", "Add new person saying the passphrase 10 times"))
        self.actionAdd_Person.setShortcut(_translate("MainWindow", "Ctrl+Shift+N"))
        self.actionQuit.setText(_translate("MainWindow", "Quit"))
        self.actionQuit.setStatusTip(_translate("MainWindow", "Quit the application"))
        self.actionQuit.setShortcut(_translate("MainWindow", "Esc"))
        self.actionBrowse_Dataset.setText(_translate("MainWindow", "Browse Dataset "))
        self.actionBrowse_Dataset.setStatusTip(_translate("MainWindow", "Open the directory of processed dataset"))
        self.actionBrowse_Dataset.setShortcut(_translate("MainWindow", "Ctrl+B"))
        self.actionBrowse_Raw_Dataset.setText(_translate("MainWindow", "Browse Raw Dataset"))
        self.actionBrowse_Raw_Dataset.setStatusTip(_translate("MainWindow", "Open the directory of raw dataset"))
        self.actionBrowse_Noise_Dataset.setText(_translate("MainWindow", "Browse Noise Dataset"))
        self.actionBrowse_Noise_Dataset.setStatusTip(_translate("MainWindow", "Open the directory of noise dataset"))
        self.actionNormal.setText(_translate("MainWindow", "Normal"))
        self.actionNormal.setStatusTip(_translate("MainWindow", "Resize the application to normal view"))
        self.actionMaximize.setText(_translate("MainWindow", "Maximize"))
        self.actionMaximize.setStatusTip(_translate("MainWindow", "Maximize the application window"))

    def closeEvent(self):
        msg = QMessageBox()

        msg.setWindowTitle("Closing Application")
        msg.setText("Are you sure you want to quit?")
        msg.setIcon(QMessageBox.Question)
        msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        msg.setDefaultButton(QMessageBox.No)

        x = msg.exec_()
        if x == QMessageBox.Yes:
            if self.p != None and self.p.state() != QProcess.NotRunning:
                self.stop_process(self.p)
            MainWindow.close()
            sys.exit()

    def open_dataset_directory(self):
        self.console("Opening root dataset directory")
        # Opens the directory where the entire dataset is stored
        self.console(f"Opening directory {DATASET_ROOT}")
        os.system(f'explorer "{DATASET_ROOT}"')  # Opens the folder in the default file explorer

    def open_raw_audio_directory(self):
        self.console("Opening raw dataset directory")
        # Opens the directory where the raw audio of the dataset is stored
        self.console(f"Opening directory {DATASET_RAW_PATH}")
        os.system(f'explorer "{DATASET_RAW_PATH}"')  # Opens the folder in the default file explorer

    def open_noise_directory(self):
        self.console("Opening noise dataset directory")
        # Opens the directory where the noise dataset is stored
        self.console(f"Opening directory {DATASET_NOISE_PATH}")
        os.system(f'explorer "{DATASET_NOISE_PATH}"')  # Opens the folder in the default file explorer

    def updateImageSize(self):
        # Get the current size of the QTextEdit
        text_edit_size = self.waveformViewer.viewport().size()

        # Scale the image pixmap to the size of the QTextEdit
        scaled_pixmap = self.pixmap.scaled(text_edit_size, Qt.KeepAspectRatio, Qt.SmoothTransformation)

        # Generate HTML to display the scaled image
        image_html = f'<img src="{self.image_path}" width="{scaled_pixmap.width()}" height="{scaled_pixmap.height()}">'

        # Set the HTML content in the QTextEdit
        self.waveformViewer.setHtml(image_html)

    def console(self, s):
        if s == "":
            pass
        elif s == "clr":
            self.consoleBrowser.clear()
        self.consoleBrowser.append(s)


    def stop_process(self):
        if self.p is not None and self.p.state() != QProcess.NotRunning:
            # disconnect all signals from the process
            self.p.readyReadStandardOutput.disconnect(self.handle_stdout)
            self.p.readyReadStandardError.disconnect(self.handle_stderr)
            self.p.stateChanged.disconnect(self.handle_state)
            self.p.finished.disconnect(self.process_finished)

            self.console("Process terminated")
            if not self.p.terminate():
                self.p = None
                print("Failed to terminate the process.")
            else:
                print("Process terminated.")

    def send_command(self):

        if self.p == None:
            pass

        elif self.p.state() == QProcess.NotRunning:
            pass

        else:
            command = self.commandLineEdit.text()  # Get command from the input field of commandLineEdit

            if command.lower() == "quit":  # Check if the command is "quit"
                self.stop_process()
            else:
                # Write the command to the stdin of the process
                self.p.write(command.encode("utf-8"))
                self.p.write("\n".encode("utf-8"))  # Write a newline to simulate pressing Enter

                #  clear the input field after sending the command
                # add grey color to the command in the console
                self.console(f">> <font color='grey'>{command}</font>")

        self.commandLineEdit.clear()

    def start_process(self): # TODO update list of person after adding a new person
        if self.p is None:  # No process running.
            self.console("Executing process")
            self.p = QProcess()  # Keep a reference to the QProcess (e.g. on self) while it's running.
            self.p.readyReadStandardOutput.connect(self.handle_stdout)
            self.p.readyReadStandardError.connect(self.handle_stderr)
            self.p.stateChanged.connect(self.handle_state)
            self.p.finished.connect(self.process_finished)  # Clean up once complete.

            if self.path == 'demo':
                self.p.start("python", [DEMO_PATH])
            elif self.path == 'add_person':
                self.p.start("python -c \"import app; app.add_person()\"")
            else:
                self.p.start("python", [self.path])

    def start_record(self):
        self.path = APPLICATION_PATH
        self.start_process()

    def start_retrain(self):
        self.path = TRAIN_MODEL_PATH
        self.start_process()

    def start_add_person(self):
        self.path = "add_person"
        self.start_process()

    def color_formatter(self, text):
        # Define color formatting spans
        color_mapping = {
            "\33[92m": "<span style=\" font-size:8pt; font-weight:600; color:#00ff00;\" >",
            "\33[91m": "<span style=\" font-size:8pt; font-weight:600; color:#ff0000;\" >",
            "\33[93m": "<span style=\" font-size:8pt; font-weight:600; color:#ffff00;\" >",
            "\33[0m": "</span>"
        }

        # Split the stdout into lines
        lines = text.split("\n")

        formatted_lines = []
        for line in lines:
            formatted_line = line
            for code, color_span in color_mapping.items():
                formatted_line = formatted_line.replace(code, color_span)
            formatted_lines.append(formatted_line)

        # Combine the lines back with newline characters
        formatted_text = "<br>".join(formatted_lines)

        return formatted_text


    def handle_stderr(self):
        data = self.p.readAllStandardError()
        stderr = bytes(data).decode("utf8")

        # convert stderr to red text.
        color = "<span style=\" font-size:8pt; font-weight:600; color:#ff0000;\" >"
        stderr = stderr.replace("\n", f"</span>\n{color}")
        stderr = f"{color}{stderr}</span>"

        # Extract progress if it is in the data.
        progress = simple_percent_parser(stderr)
        if progress:
            self.progressBar.setValue(progress)

        self.console(stderr)

    def handle_stdout(self):
        data = self.p.readAllStandardOutput()
        stdout = bytes(data).decode("utf8")

        # progress = progress_parser_during_training(stdout)
        # if progress:
        #     self.progressBar.setValue(progress)

        formatted_stdout = self.color_formatter(stdout)

        # # Extract progress if it is in the data.
        # progress = simple_percent_parser(formatted_stdout)
        # if progress:
        #     self.progressBar.setValue(progress)

        # Extract progress if it is in the data during training.


        self.console(formatted_stdout)

    def handle_state(self, state):
        states = {
            QProcess.NotRunning: 'Not running',
            QProcess.Starting: 'Starting',
            QProcess.Running: 'Running',
        }
        state_name = states[state]
        self.console(f"State changed: {state_name}")

    def process_finished(self):
        self.console("Process finished.")
        self.p = None


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
